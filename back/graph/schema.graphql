type Query {
  user(email: String): User
  node(
    id: ID!
  ): Node
}

type User implements Node {
  id: ID!
  email: String!
  todos(status: Status = ANY, 
        after: String, first: Int,
        before: String, last: Int
      ) : TodoConnection
  totalCount: Int!
  completedCount: Int!
}

interface Node {
  id: ID!
}

type TodoConnection {
  pageInfo: PageInfo!
  edges: [TodoEdge]
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
  hasPreviousPage: Boolean!
  startCursor: String
}

type TodoEdge {
  node: Todo
  cursor: String!
}

type Todo {
  id: ID!
  text: String!
  complete: Boolean!
}

type Mutation {
  addUser(input: AddUserInput!): AddUserPayload
  removeUser(input: RemoveUserInput!): RemoveUserPayload
  addTodo(input: AddTodoInput!): AddTodoPayload
  changeTodoStatus(input: ChangeTodoStatusInput!): ChangeTodoStatusPayload
  clearCompletedTodos(input: ClearCompletedTodosInput!): ClearCompletedTodosPayload
  markAllTodos(input: MarkAllTodosInput!): MarkAllTodosPayload
  removeTodo(input: RemoveTodoInput!): RemoveTodoPayload
  renameTodo(input: RenameTodoInput!): RenameTodoPayload
}

input AddUserInput {
  email: String!
  clientMutationId: String  
}

type AddUserPayload {
  id: ID!
  clientMutationId: String  
}

input RemoveUserInput {
  email: String!
  clientMutationId: String  
}

type RemoveUserPayload {
  clientMutationId: String  
}

input AddTodoInput {
  text: String!
  userId: ID!
  clientMutationId: String
}

type AddTodoPayload {
  todoEdge: TodoEdge!
  user: User!
  clientMutationId: String
}

input ChangeTodoStatusInput {
  complete: Boolean!
  id: ID!
  userId: ID!
  clientMutationId: String
}

type ChangeTodoStatusPayload {
  todo: Todo!
  user: User!
  clientMutationId: String
}

input MarkAllTodosInput {
  complete: Boolean!
  userId: ID!
  clientMutationId: String
}

type MarkAllTodosPayload {
  changedTodos: [Todo!]
  user: User!
  clientMutationId: String
}

input ClearCompletedTodosInput {
  userId: ID!
  clientMutationId: String
}

type ClearCompletedTodosPayload {
  deletedTodoIds: [String!]
  user: User!
  clientMutationId: String
}

input RemoveTodoInput {
  id: ID!
  userId: ID!
  clientMutationId: String
}

type RemoveTodoPayload {
  deletedTodoId: ID!
  user: User!
  clientMutationId: String
}

input RenameTodoInput {
  id: ID!
  userId: ID!
  text: String!
  clientMutationId: String
}

type RenameTodoPayload {
  todo: Todo!
  clientMutationId: String
}

enum Status {
    ANY
    COMPLETED
}
